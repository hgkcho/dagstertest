version: "3"

services:
  https-portal:
    image: steveltn/https-portal:1
    ports:
      - 80:80
      - 443:443
    environment:
      - DOMAINS=dagstertest.d.hgkcho.com -> http://webserver:3000
      - STAGE=production # Don't use production until staging works
      - SERVER_NAMES_HASH_BUCKET_SIZE=128
      - ACCESS_RESTRICTION
    volumes:
      - https-portal-data:/var/lib/https-portal
    profiles:
      - prod
    networks:
      - network

  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  db:
    image: postgres:11
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: db
    networks:
      - network

  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
  # webserver.
  user_code:
    build:
      context: .
      dockerfile: ./Dockerfile.usercode
    image: user_code_image
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: test
      DAGSTER_POSTGRES_PASSWORD: test
      DAGSTER_POSTGRES_DB: db
      DAGSTER_CURRENT_IMAGE: user_code_image
    networks:
      - network

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  webserver:
    build:
      context: .
      dockerfile: ./Dockerfile.dagster
    image: dagster_webserver
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: test
      DAGSTER_POSTGRES_PASSWORD: test
      DAGSTER_POSTGRES_DB: db
      DAGSTER_CURRENT_IMAGE: dagster_webserver
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - network
    depends_on:
      - db
      - user_code

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  daemon:
    build:
      context: .
      dockerfile: ./Dockerfile.dagster
    entrypoint:
      - dagster-daemon
      - run
    image: dagster_webserver
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: test
      DAGSTER_POSTGRES_PASSWORD: test
      DAGSTER_POSTGRES_DB: db
      DAGSTER_CURRENT_IMAGE: dagster_webserver
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - network
    depends_on:
      - db
      - user_code

networks:
  network:
    driver: bridge
    name: network

volumes:
  https-portal-data:
